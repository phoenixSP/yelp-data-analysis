1) Why do the different metropolitan areas have different tendencies in which businesses they like/dislike?

2) the socioeconomic level of an area based on the number of checkins?

3) Visualize businesses according to their business categories

4) Can you tell whether a review is good or bad based on review text?
	step 1. count the occurrence of words in review 
	#Python Code
	import json
	import dicttoxml
	import sys

	def takeSecond(elem):
	    return elem[1]

	source_dataset_path = "../data/dataset_no_nulls/"
	file = "../word_count.txt"
	word_cnt = {}
	with open(source_dataset_path  +'review_no_nulls.json', "r") as ins:
	    for line in ins:
	        try:
	            json_obj = json.loads(line)
	            if "text" not in json_obj:
	                continue

	            text = json_obj["text"].upper()
	            words = text.split()
	            for w in words:
	                if w not in word_cnt:
	                    word_cnt[w] = 0
	                word_cnt[w] = word_cnt[w] + 1
	        except ValueError:
	            print("err")

	word_list = []
	for k, v in word_cnt.items():
	    word_list.append((k, v))
	word_list.sort(key=takeSecond, reverse=True)
	with open(file, "w") as out:
	    for word in word_list:
	        out.write(word[0] + "," + str(word[1]) + "\n")

	step 2. Find average stars of reviews that include a given word and compare it against overall average stars.
	#XQuery Code
	let $reviews := /root/review
	let $words := ("HORRIBLE", "GREAT")
	let $result := (
		for $w in $words
			let $reviews_filtered :=(
				for $x in $reviews
				where contains(upper-case($x/text), $w)
				return $x)
		return 
			<stat word="{$w}"> {avg($reviews_filtered/stars)} </stat>
	)
	return $result


	Step 3. For a given review, we could possibly say whether it is positive or negative based on its content (not using its star). 


5) Can you correlate the Environmental Health Safety Inspection rating for Glendale businesses to their Yelp ratings?
